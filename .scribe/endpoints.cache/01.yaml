## Autogenerated by Scribe. DO NOT MODIFY.

name: Meters
description: ''
endpoints:
  -
    httpMethods:
      - POST
    uri: 'api/v2/meters/{meter_number}/valve'
    metadata:
      groupName: Meters
      groupDescription: ''
      subgroup: ''
      subgroupDescription: ''
      title: 'Update Meter Valve Status'
      description: |-
        Toggle a meter's valve to either open or closed state.

        **Response Types:**
        - **Request examples labeled "(Direct operation)"** are returned immediately after the request
        - **Request examples labeled "(sent to your callback URL)"** represent payloads that will be delivered to your callback URL for asynchronous operations

        **Asynchronous Flow (for supported meter types):**
        1. Send the valve control request
        2. Receive immediate response with message_id and status: "pending"
        3. Wait for callback to your registered webhook URL with the final result

        **Callback URL Requirements:**
        - Must accept HTTP POST requests
        - Must respond with HTTP 200 status for successful delivery
        - Should handle JSON payload as shown in callback examples below

        **Callback Security & Headers:**
        Callbacks are sent as HTTP POST requests with these headers:
        - Content-Type: application/json
        - User-Agent: Hydro-Pro-Webhook/1.0
        - X-Webhook-Signature: sha256=[signature] (if secret token configured)

        **Security:** If you've configured a secret token, verify the X-Webhook-Signature header using HMAC SHA256:
        sha256(hmac(json_payload, your_secret_token))

        **Retry Policy:** Failed callback deliveries retry up to 3 times with intervals of 3 seconds, 10 seconds, and 30 seconds.
      authenticated: true
      custom: []
    headers:
      Authorization: 'Bearer {YOUR_AUTH_KEY}'
      Content-Type: application/json
      Accept: application/json
    urlParameters:
      meter_number:
        name: meter_number
        description: 'The meter number.'
        required: true
        example: MTR123456789
        type: string
        enumValues: []
        exampleWasSpecified: true
        custom: []
    cleanUrlParameters:
      meter_number: MTR123456789
    queryParameters: []
    cleanQueryParameters: []
    bodyParameters:
      valve_status:
        name: valve_status
        description: 'The desired valve status (1 for open, 0 for closed).'
        required: true
        example: 1
        type: integer
        enumValues: []
        exampleWasSpecified: true
        custom: []
    cleanBodyParameters:
      valve_status: 1
    fileParameters: []
    responses:
      -
        status: 200
        content: |-
          {
            "success": true,
            "message": "Valve control request initiated",
            "data": {
              "meter_number": "MTR123456789",
              "message_id": "MSG-2025091212345678",
              "requested_valve_status": "close",
              "message": "Request submitted successfully. Result will be delivered via callback.",
              "status": "pending"
            },
            "errors": null
          }
        headers: []
        description: 'Valve control request initiated successfully (Direct operation)'
        custom: []
      -
        status: 200
        content: |-
          {
            "success": true,
            "message": "Valve closed successfully",
            "data": {
              "event_type": "valve_status_update",
              "meter_number": "MTR123456789",
              "requested_action": "valve-control",
              "valve_status": "closed",
              "timestamp": "2025-09-12 10:02:19",
              "message_id": "17791"
            },
            "errors": null
          }
        headers: []
        description: 'Callback - Valve Closed Successfully (sent to your callback URL)'
        custom: []
      -
        status: 200
        content: |-
          {
            "success": true,
            "message": "Valve opened successfully",
            "data": {
              "event_type": "valve_status_update",
              "meter_number": "MTR123456789",
              "requested_action": "valve-control",
              "valve_status": "open",
              "timestamp": "2025-09-12 10:02:19",
              "message_id": "17791"
            },
            "errors": null
          }
        headers: []
        description: 'Callback - Valve Opened Successfully (sent to your callback URL)'
        custom: []
      -
        status: 200
        content: |-
          {
            "success": false,
            "message": "Operation timed out",
            "data": {
              "event_type": "valve_status_update",
              "meter_number": "MTR123456789",
              "requested_action": "valve-control",
              "valve_status": "unknown",
              "timestamp": "2025-09-12 10:02:19",
              "message_id": "17791"
            },
            "errors": {
              "type": "CallbackError",
              "details": "Operation timed out"
            }
          }
        headers: []
        description: 'Callback - Operation Timeout (sent to your callback URL)'
        custom: []
      -
        status: 200
        content: |-
          {
            "success": false,
            "message": "Operation failed",
            "data": {
              "event_type": "valve_status_update",
              "meter_number": "MTR123456789",
              "requested_action": "valve-control",
              "valve_status": "unknown",
              "timestamp": "2025-09-12 10:02:19",
              "message_id": "17791"
            },
            "errors": {
              "type": "CallbackError",
              "details": "Operation failed"
            }
          }
        headers: []
        description: 'Callback - Operation Failed (sent to your callback URL)'
        custom: []
      -
        status: 404
        content: |-
          {
            "success": false,
            "message": "Meter not found",
            "data": null,
            "errors": {
              "type": "ModelNotFoundException",
              "details": null
            }
          }
        headers: []
        description: 'Meter not found (Direct operation)'
        custom: []
      -
        status: 422
        content: |-
          {
            "success": false,
            "message": "Failed, please contact website admin for help",
            "data": null,
            "errors": {
              "type": "ValveOperationError",
              "details": null
            }
          }
        headers: []
        description: 'Valve operation failed (Direct operation)'
        custom: []
      -
        status: 422
        content: |-
          {
            "success": false,
            "message": "Failed to initiate valve control request",
            "data": null,
            "errors": {
              "type": "ValveOperationError",
              "details": null
            }
          }
        headers: []
        description: 'Failed to initiate valve control request (Direct operation)'
        custom: []
      -
        status: 500
        content: |-
          {
            "success": false,
            "message": "An unexpected error occurred while processing the valve control request",
            "data": null,
            "errors": {
              "type": "ServerError",
              "details": "Specific error message details"
            }
          }
        headers: []
        description: 'Server error (Direct operation)'
        custom: []
    responseFields: []
    auth:
      - headers
      - Authorization
      - 'Bearer 66EVakh8g14ZfD3Pvc5beda'
    controller: null
    method: null
    route: null
    custom: []
  -
    httpMethods:
      - GET
    uri: 'api/v2/meters/{meter_number}/readings'
    metadata:
      groupName: Meters
      groupDescription: ''
      subgroup: ''
      subgroupDescription: ''
      title: 'Get Meter Readings'
      description: 'Retrieve the latest meter readings for a given meter number.'
      authenticated: true
      custom: []
    headers:
      Authorization: 'Bearer {YOUR_AUTH_KEY}'
      Content-Type: application/json
      Accept: application/json
    urlParameters:
      meter_number:
        name: meter_number
        description: 'The unique meter number.'
        required: true
        example: MTR123456789
        type: string
        enumValues: []
        exampleWasSpecified: true
        custom: []
    cleanUrlParameters:
      meter_number: MTR123456789
    queryParameters: []
    cleanQueryParameters: []
    bodyParameters: []
    cleanBodyParameters: []
    fileParameters: []
    responses:
      -
        status: 200
        content: |-
          {
            "success": true,
            "message": "Current Meter Readings",
            "data": {
              "current_meter_readings": 345.67,
              "last_reading_date": "2025-08-09 12:34:56"
            },
            "errors": null
          }
        headers: []
        description: 'Meter readings retrieved successfully'
        custom: []
      -
        status: 404
        content: |-
          {
            "success": false,
            "message": "No query results for model [Meter]",
            "data": null,
            "errors": {
              "type": "ModelNotFoundException",
              "details": null
            }
          }
        headers: []
        description: 'Meter not found'
        custom: []
    responseFields: []
    auth:
      - headers
      - Authorization
      - 'Bearer 3PeZ5fkgv4b6acVahE18D6d'
    controller: null
    method: null
    route: null
    custom: []
